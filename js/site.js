const squares=document.querySelectorAll(".game-board__square"),result=document.querySelector(".game-result"),resultMessage=document.querySelector(".game-result__message"),winningCombos=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];class Game{constructor(){this.currentPlayer="x",this.gameStatus=!0,this.players={x:{label:"Player 1",moves:[]},o:{label:"Player 2",moves:[]}},this.moves=0,squares.forEach(((e,s)=>{e.dataset.sq=s,e.addEventListener("click",this._squareClickHandler.bind(this))}))}_changePlayer(){this.currentPlayer="x"===this.currentPlayer?"o":"x";const e=document.querySelectorAll(".game__status div");e.forEach((e=>e.classList.remove("active"))),e["x"===this.currentPlayer?0:1].classList.add("active")}_determineWinner(){for(const e of winningCombos){const s=e.every((e=>this.players[this.currentPlayer].moves.includes(e)));if(console.log(s),s)return this._endGame()}this._changePlayer()}_endGame(){this.gameStatus=!1,result.classList.add("game-over"),resultMessage.textContent=`${this.players[this.currentPlayer].label} Wins!`,console.log("endgame")}_squareClickHandler(e){if(!this.gameStatus)return;const s=e.target.closest(".game-board__square");s.dataset.value||(s.innerHTML=`<svg class="icon-${this.currentPlayer}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 150 150"><use href="#icon-${this.currentPlayer}" />`,s.dataset.value=this.currentPlayer,this.players[this.currentPlayer].moves.push(Number(s.dataset.sq)),this.moves++,this._determineWinner())}}const game=new Game;console.log(game);